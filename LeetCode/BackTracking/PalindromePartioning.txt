class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        boolean dp[][] = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = 0; j <= i; j++) {
                if((s.charAt(i) == s.charAt(j)) && (i-j <= 2 || dp[j+1][i-1])) 
                    dp[j][i] = true;
            }
        }
        helper(res, new ArrayList<String>(), dp, 0, s);
        return res;
    }
    public void helper(List<List<String>> res, List<String> temp, boolean dp[][], int pos, String s) {
        if(pos == s.length()) {
            res.add(new ArrayList<String>(temp));
            return;
        }
        for(int i = pos; i < s.length(); i++) {
            if(dp[pos][i]) {
                temp.add(s.substring(pos, i+1));
                helper(res, temp, dp, i+1, s);
                temp.remove(temp.size()-1);
            }
        }
    }
}
