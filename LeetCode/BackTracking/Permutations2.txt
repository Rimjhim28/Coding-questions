class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean used[] = new boolean[nums.length];
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        recurse(res, new ArrayList<Integer>(), nums, used);
        return res;
        
    }
    public void recurse(List<List<Integer>> res, List<Integer> temp, int[] nums, boolean[] used) {
        if(temp.size() == nums.length) {
            res.add(new ArrayList(temp));
            return;
        }
        for(int i = 0; i < nums.length; i++) {
            if(used[i]) continue;
            if(i > 0 && nums[i] == nums[i-1] && !used[i-1]) continue;
            used[i] = true;
            temp.add(nums[i]);
            recurse(res, temp, nums, used);
            temp.remove(temp.size()-1);
            used[i] = false;
        }
    }
}
