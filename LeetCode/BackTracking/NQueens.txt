class Solution {
    int n;
    List<List<String>> res;
    public List<List<String>> solveNQueens(int n) {
        this.n = n;
        res = new ArrayList<>();
        char temp[][] = new char[n][n];
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                temp[i][j] = '.';
        recurseQueens(temp, 0);
        return res;
    }
    
    public boolean recurseQueens(char[][] temp, int col) {
        if(col == n) {
            res.add(transform(temp));
            return true;
        }
        boolean res = false;
        for(int i = 0; i < n; i++) {
            if(isSafe(temp, i, col)) {
                temp[i][col] = 'Q';
                res = recurseQueens(temp, col+1) || res;
                temp[i][col] = '.';
            }
        }
        return res;
    }
    
    public boolean isSafe(char[][] temp, int row, int col) {
        int i, j;
        for(i = 0; i < n; i++)
            if(temp[row][i] == 'Q')
                return false;
        for(i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if(temp[i][j] == 'Q')
                return false;
        for(i = row, j = col; j >= 0 && i < n; i++, j--)
            if(temp[i][j] == 'Q')
                return false;
        return true;
    }
    
    public List<String> transform(char[][] temp) {
        List<String> s = new ArrayList<>();
        for(int i = 0; i < n; i++)
           s.add(new String(temp[i]));
        return s;
    }
}
