class Solution {
    int n;
    public int minimumTotal(List<List<Integer>> triangle) {
        n = triangle.size();
        int dp[][] = new int[n][n];
        return compute(triangle, 0, 0, 0, dp);
    }
    
    public int compute(List<List<Integer>> triangle, int curr_sum, int i, int j, int dp[][]) {
        if(i == n-1) {
            return triangle.get(i).get(j);
        }
        if(dp[i][j] != 0)
            return dp[i][j];
        int b, c;
        b = compute(triangle, curr_sum + triangle.get(i+1).get(j), i+1, j, dp);
        c = compute(triangle, curr_sum+triangle.get(i+1).get(j+1), i+1, j+1, dp);
        dp[i][j] = triangle.get(i).get(j) + Math.min(b,c);
        return dp[i][j];
    }
}