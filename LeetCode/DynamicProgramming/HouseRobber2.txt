class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 0) return 0;
        if(n == 1) return nums[0];
        if(n == 2) return Math.max(nums[0], nums[1]);
        int dp1[] = new int[n-1];
        int dp2[] = new int[n];
        dp1[0] = nums[0]; dp1[1] = Math.max(nums[0], nums[1]);
        dp2[1] = nums[1]; dp2[2] = Math.max(nums[1], nums[2]);
        robHouse(2, n-2, nums, dp1);
        robHouse(3, n-1, nums, dp2);
        return Math.max(dp1[n-2], dp2[n-1]);
    }
    public void robHouse(int lo, int hi, int nums[], int dp[]) {
        for(int i = lo; i <= hi; i++) {
            dp[i] = Math.max(dp[i-1], nums[i] + dp[i-2]);
        }
    }
}