class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int color[] = new int[n];
        Arrays.fill(color, -1);
        for(int i = 0; i < n; i++) {
            if(color[i] == -1)
                if(isBipartiteUtil(graph, i, color) == false)
                    return false;
        }
        return true;
    }
    
    public boolean isBipartiteUtil(int graph[][], int src, int color[]) {
        LinkedList<Integer> q = new LinkedList<Integer>();
        color[src] = 1;
        q.add(src);
        while(!q.isEmpty()) {
            int u = q.getFirst();
            q.pop();
            for(int v: graph[u]) {
                if(color[v] == -1) {
                    color[v] = 1 - color[u];
                    q.push(v);
                }
                else if(color[v] == color[u])
                    return false;
            }
        }
        return true;
    }
}
