class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int count = 0; 
        int graph[][] = new int[numCourses][numCourses];
        int inDegree[] = new int[numCourses];
        Queue<Integer> q = new LinkedList();
        for(int pre[]: prerequisites){
            inDegree[pre[0]]++;
            graph[pre[1]][pre[0]] = 1;
        }
        for(int i = 0; i < numCourses; i++) {
            if(inDegree[i] == 0)
                q.add(i);
        }
        while(!q.isEmpty()) {
            int x = q.poll();
            count+=1;
            for(int i = 0; i < numCourses; i++) {
                if(graph[x][i] == 1) {
                    if(--inDegree[i] == 0)
                        q.add(i);
                }

            }       
        }
        return (count == numCourses);
    }
}
