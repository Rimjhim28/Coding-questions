class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        int color[] = new int[n];
        List<Integer> ans = new ArrayList();
        for(int i = 0; i < n; i++) {
            if(dfs(i, color, graph))
                ans.add(i);
        }
        return ans;
    }
    
    public boolean dfs(int node, int[] color, int graph[][]) {
        if(color[node] > 0)
            return (color[node] == 2);
        color[node] = 1;
        for(int nei: graph[node]) {
            if(color[nei] == 2)
                continue;
            if(color[nei] == 1 || !dfs(nei, color, graph))
                return false;
        }
        color[node] = 2;
        return true;
    }
}
