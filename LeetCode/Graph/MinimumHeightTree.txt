class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        int degree[] = new int[n];
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++)
            adj.add(new ArrayList<Integer>());
        for(int edge[]: edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        for(int i = 0; i < n; i++){
            degree[i] = adj.get(i).size();
            System.out.println("i: " + degree[i]);
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n; i++) {
            if(degree[i] <= 1){
                q.add(i);
            }
        }
        while(n > 2) {
            int s = q.size();
            for(int i = 0; i < s; i++) {
                int u = q.poll();
                n--;
                for(int v: adj.get(u)) {
                    degree[v]-=1;
                    if(degree[v] == 1)
                        q.add(v);
                }
            }
        }
        return new ArrayList(q);
    }
}
