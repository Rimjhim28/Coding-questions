class Solution {
    public List<Integer> countSmaller(int[] nums) {
        int n = nums.length;
        int ind[] = new int[n];
        int ans[] = new int[n];
        for(int i = 0; i < n; i++)
            ind[i] = i;
        mergeSort(ind, nums, ans, 0, n-1);
        List<Integer> res = new ArrayList<>();
        for(int i = 0; i < n; i++)
            res.add(ans[i]);
        return res;
    }
    
    public void mergeSort(int ind[], int nums[], int ans[], int l, int h) {
        if(l < h) {
            int mid = (l+h)/2;
            mergeSort(ind, nums, ans, l, mid);
            mergeSort(ind, nums, ans, mid+1, h);
            merge(ind, nums, ans, l, mid, h);
        }
    }
    
    public void merge(int ind[], int nums[], int ans[], int l, int m, int h) {
        int n1 = m-l+1;
        int n2 = h-m;
        int a1[] = new int[n1];
        int a2[] = new int[n2];
        for (int i=0; i<n1; ++i) a1[i] = ind[l + i]; 
        for (int j=0; j<n2; ++j) a2[j] = ind[m + 1+ j];   
        int i = 0, j = 0, k = l;
        while(i < n1 && j < n2) {    
            if(nums[a2[j]] < nums[a1[i]]) {
                ind[k] = a2[j];
                j++;k++;
            } else {
                ind[k] = a1[i];
                ans[a1[i]]+=j;
                i++;k++;
            }
        }
        while(i < n1) {
            ind[k] = a1[i];
            ans[a1[i]]+=j;
            i++;k++;
        }
        while(j < n2) {
            ind[k] = a2[j];
            j++;k++;
        }
    }
}
