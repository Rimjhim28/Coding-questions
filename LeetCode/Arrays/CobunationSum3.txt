class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int nums[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        findCombination(ans, temp, n, k, 0, nums);
        return ans;
    }
    
    public void findCombination(List<List<Integer>> ans, List<Integer> temp, int n, int k, int start, int[] nums) {
        if(n < 0) return;
        if(n == 0) {
            if(temp.size() == k)
                ans.add(new ArrayList<Integer>(temp));
        } else {
            for(int i = start; i < nums.length; i++) {
                temp.add(nums[i]);
                findCombination(ans, temp, n-nums[i], k, i+1, nums);
                temp.remove(temp.size()-1);
            }
        }
    }
}
