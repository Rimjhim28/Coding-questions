class Solution {
    public List<Integer> splitIntoFibonacci(String S) {
        List<Integer> temp = new ArrayList<>();
        recurse(S, temp, 0);
        return temp;
    }
    
    public boolean recurse(String S, List<Integer> temp, int start) {
        if(start == S.length() && temp.size() >= 3)
            return true;
        for(int i = start; i < S.length(); i++) {
            if(S.charAt(start) == '0' && i > start)
                break;
            long num = Long.parseLong(S.substring(start, i+1));
            if(num > Integer.MAX_VALUE)
                break;
            int size = temp.size();
            if(size >= 2 && num > temp.get(size-1)+temp.get(size-2))
                break;
            if(size <= 1 || num == temp.get(size-1)+temp.get(size-2)) {
                temp.add((int)num);
                if(recurse(S, temp, i+1))
                    return true;
                temp.remove(temp.size()-1);
            }
        }
        return false;
    }
}
