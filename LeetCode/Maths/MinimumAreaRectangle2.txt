import java.awt.Point;

class Solution {
    public double minAreaFreeRect(int[][] points) {
        int N = points.length;
        Point[] A = new Point[N];
        for(int i = 0; i < N; i++)
            A[i] = new Point(points[i][0], points[i][1]);
        
        Map<Integer, Map<Point, List<Point>>> seen = new HashMap();
        for(int i= 0; i < N; i++){
            for(int j = i+1; j < N; j++) {
                Point center = new Point(A[i].x+A[j].x, A[i].y+A[j].y);
                int r2 = (A[i].x-A[j].x)*(A[i].x-A[j].x);
                r2+=(A[i].y-A[j].y)*(A[i].y-A[j].y);
                if(!seen.containsKey(r2))
                    seen.put(r2, new HashMap<Point, List<Point>>());
                if(!seen.get(r2).containsKey(center))
                    seen.get(r2).put(center, new ArrayList<Point>());
                seen.get(r2).get(center).add(A[i]);
            }
        }
        
        double ans = Double.MAX_VALUE;
        for(Map<Point, List<Point>> info: seen.values()){
            for(Point center: info.keySet()){
                List<Point> candidates = info.get(center);
                int clen = candidates.size();
                for(int i =0; i < clen; i++){
                    for(int j = i+1; j < clen; j++){
                        Point p = candidates.get(i);
                        Point q = candidates.get(j);
                        Point q2 = new Point(center);
                        q2.translate(-q.x, -q.y);
                        double area = p.distance(q)*p.distance(q2);
                        if(area < ans)
                            ans = area;
                    }
                }
            }        
        }        
        return (ans<Double.MAX_VALUE)?ans:0;        
    }
}
