class Solution {
    
    public int numberOfPatterns(int m, int n) {
        return find(m,n);
    }
    
    public int find(int m, int n) {
        int jump[][] =new int[10][10];
        jump[1][3] = jump[3][1] = 2; 
        jump[7][9] = jump[9][7] = 8; 
        jump[1][7] = jump[7][1] = 4; 
        jump[3][9] = jump[9][3] = 6; 
        jump[1][9] = jump[9][1] = jump[2][8] = jump[8][2] 
          = jump[3][7] = jump[7][3] = jump[4][6] = jump[6][4] = 5; 
        
        int visited[] = new int[10];
        int ways = 0;
        for(int i = m; i <= n; i++) {
            ways += 4 * count(visited, jump, 1, i - 1); 
            ways += 4 * count(visited, jump, 2, i - 1);
            ways += count(visited, jump, 5, i - 1); 
        }
        return ways;
    }
    
    public int count(int visited[], int jump[][], int curr, int touch) {
        if(touch <= 0) {
            return touch == 0? 1: 0;
        }
        int ways=0;
        visited[curr] = 1;
        for(int i = 1; i < 10; i++) {
            if((visited[i] == 0) && (jump[curr][i] == 0 || visited[jump[curr][i]] == 1))
                ways += count(visited, jump, i, touch-1);
        }
        visited[curr] = 0;
        return ways;
    }
}