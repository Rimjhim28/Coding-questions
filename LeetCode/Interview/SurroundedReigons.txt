class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0)
            return;
        int r = board.length, c = board[0].length;
        for (int i=0; i<r; i++){
            if (board[i][0] == 'O')
                dfs(board, i, 1);
            if (board[i][c-1] == 'O')
                dfs(board, i, c-2);
        }
        
        for (int i=0; i < c; i++){
            if (board[0][i] == 'O')
                dfs(board, 1, i);
            if (board[r-1][i] == 'O')
                dfs(board, r-2, i);
        }
        for(int i = 1; i < r-1; i++) {
            for(int j = 1; j < c-1; j++) {
                if(board[i][j] == '*')
                    board[i][j] = 'O';
                else if(board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
    }
    
    public void dfs(char board[][], int i, int j) {
        if(i <= 0 || j <= 0 || i >= board.length-1 || j >= board[0].length-1 || board[i][j] == 'X')
            return;
        if(board[i][j] == '*')
            return;
        if(board[i][j] == 'O')
            board[i][j] = '*';
        dfs(board, i+1, j);
        dfs(board, i-1, j);
        dfs(board, i, j-1);
        dfs(board, i, j+1);
    }
}