public class SnakeGame {
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    int[][] food;
    int width;
    int height;
    int r;
    LinkedList<int[]> snake;
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.r = 0;
        this.food = food;
        snake = new LinkedList<int[]>();
        snake.add(new int[]{0,0});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        int x = snake.get(0)[0];
        int y = snake.get(0)[1];
        if(direction.equals("U")) {
            x = x-1;
        }
        else if(direction.equals("L")) {
            y = y-1;
        }
        else if(direction.equals("R")) {
            y = y+1;
        }
        else {
            x = x+1;
        }
        if(x< 0 || x>=height || y <0 || y >=width) return -1;
        int[] todelete = snake.get(snake.size()-1);
        snake.remove(snake.size()-1);
        if(isdead(x,y)) return -1;
        snake.add(0,new int[]{x,y});
        if(food.length > r && x == food[r][0] && y == food[r][1]) {
            snake.add(todelete);
            r++;
            return r;
        }
        return r;
    }
    
    public boolean isdead(int x, int y) {
        for(int i = snake.size() -1; i>=0; i--) {
            int[] t= snake.get(i);
            if(t[0] == x && t[1] ==y) return true; 
        }
        return false;
    }
}