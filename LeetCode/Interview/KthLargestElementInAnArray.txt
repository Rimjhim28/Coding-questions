import java.util.Random;
class Solution {
    int nums[];
    
    public void swap(int a, int b) {
        int t = this.nums[a];
        this.nums[a] = this.nums[b];
        this.nums[b] = t;
    }
    
    public int partition(int left, int right, int pivot_ind) {
        int pivot = this.nums[pivot_ind];
        swap(pivot_ind, right);
        int store_ind = left;
        for(int i = left; i <= right; i++) {
            if(this.nums[i] < pivot) {
                swap(store_ind, i);
                store_ind++;
            }
        }
        swap(store_ind, right);
        return store_ind;
    }
    
    public int quickselect(int left, int right, int k_smallest) {
        if(left == right)
            return this.nums[left];
        Random rnd = new Random();
        int pivot_ind = left + rnd.nextInt(right-left);
        pivot_ind = partition(left, right, pivot_ind);
        if(k_smallest == pivot_ind)
            return this.nums[k_smallest];
        else if(k_smallest < pivot_ind)
            return quickselect(left, pivot_ind-1, k_smallest);
        return quickselect(pivot_ind+1, right, k_smallest);
    }
    
    public int findKthLargest(int[] nums, int k) {
        this.nums = nums;
        int size = nums.length;
        return quickselect(0, size-1,size-k);
    }
}