#include <bits/stdc++.h>
using namespace std;

void update(int segTree[], int lazy[], int ss, int se, int si, int us, int ue, int val) {
    if (lazy[si] != 0) { 
        segTree[si] += (se-ss+1)*lazy[si];
        if (ss != se) { 
            lazy[si*2 + 1] += lazy[si]; 
            lazy[si*2 + 2] += lazy[si]; 
        } 
        lazy[si] = 0; 
    }  
    if (ss>se || ss>ue || se<us) 
        return ; 
    if (ss>=us && se<=ue) { 
        segTree[si] += (se-ss+1)*val; 
        if (ss != se) { 
            lazy[si*2 + 1]   += val; 
            lazy[si*2 + 2]   += val; 
        } 
        return; 
    } 
    int mid = (ss+se)/2; 
    update(segTree, lazy, ss, mid, si*2+1, us, ue, val); 
    update(segTree, lazy, mid+1, se, si*2+2, us, ue, val);
    segTree[si] = segTree[si*2+1] + segTree[si*2+2]; 
} 

int query(int segTree[], int lazy[], int ss, int se, int si, int qs, int qe){
	if(lazy[si] != 0) {
		segTree[si] += ((se-ss+1) * lazy[si]);
		if(ss != se){
			lazy[2*si+1] = lazy[si];
			lazy[2*si+2] = lazy[si];
		}
		lazy[si] = 0;
	}
	if(ss>se || ss>qe || se<qs) 
		return 0;
    if(ss>=qs && se<=qe){
    	return segTree[si];
    }
    int mid = (ss+se)/2;
    return (query(segTree, lazy, ss, mid, 2*si+1, qs, qe) + query(segTree, lazy, mid+1, se, 2*si+2, qs, qe));
}

int main() {
	int t, n, c, p, q, v, x, i, ans;
	scanf("%d ", &t);
	while(t-- > 0) {
		scanf("%d ", &n);
		scanf("%d ", &c);
		int arr[n] = {0}, segTree[4*n] = {0}, lazy[4*n] = {0};
		for(i = 0 ; i < c; i++){
			scanf("%d ", &x);
			if(x == 0) {
				scanf("%d ", &p);
				scanf("%d ", &q);
				scanf("%d ", &v);
				update(segTree, lazy, 0, n-1, 0, p-1, q-1, v);
			} else if(x == 1){
				scanf("%d ", &p);
				scanf("%d ", &q);
				ans = query(segTree, lazy, 0, n-1, 0, p-1, q-1);
				printf("%d\n", ans);
			}
		}
	}
	return 0;
}

