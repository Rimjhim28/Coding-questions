#include <bits/stdc++.h>
using namespace std;

int buildTree(int arr[], int segmentTree[], int ss, int se, int index) {
	if(ss==se){
		segmentTree[index] = arr[ss];
		return segmentTree[index];
	}
	int mid = (ss+se)/2;
	segmentTree[index] = buildTree(arr, segmentTree, ss, mid, 2*index+1) 
						& buildTree(arr, segmentTree, mid+1, se, 2*index+2);
	return segmentTree[index];
}

int query(int segmentTree[], int size, int ss, int se, int qs, int qe, int index) {
	if(ss == se){
		if((qs<=ss) && (qe>=se))
			return segmentTree[index];
		else
			return 1;
	} else if((qs>=ss) && (qe<=se)) {
		return segmentTree[index];
	} else if ((ss>qe)&&(se<qs)) {
		return 1;
	}
	int mid = (ss+se)/2;
	return (query(segmentTree, size, ss, mid, qs, qe, 2*index+1) 
			& query(segmentTree, size, mid+1, se, qs, qe, 2*index+2));
}

int main() {
	
	ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 

    int i, t, n , k, size, qs, qe, neg_mag, ans;
		cin>>t;
		while(t-- > 0) {
			cin>> n >> k;
			int arr[n];
			for(i = 0; i < n; i++)
				cin>>arr[i];

			//building the segment tree
			int x = ceil(log(n)/log(2));
			size = 2*(pow(2,x))-1;

			int segmentTree[size];
			buildTree(arr, segmentTree, 0, n-1, 0);

			//answering the queries
			if(k > size/2){
				ans = query(segmentTree, size, 0, n-1, 0, size-1, 0);
				for(i = 0; i < n; i++)
					arr[i] = ans;
			} else {
				for(i = 0; i < n; i++){
					qs = i-k;
					qe = i+k;
					if(qs < 0){
						qs = n - fabs(qs);
						arr[i] = query(segmentTree, size, 0, n-1, qs, n-1, 0) & query(segmentTree, size, 0, n-1, 0, qe, 0);
					} else if(qe > n-1){
						qe = qe-n-1;
						arr[i] = query(segmentTree, size, 0, n-1, qs, n-1, 0) & query(segmentTree, size, 0, n-1, 0, qe, 0);
					} else {
						arr[i] = query(segmentTree, size, 0, n-1, qs, qe, 0);
					}
				}
			}
			for(i = 0; i < n; i++)
				cout<<arr[i]<<" ";
			cout<<"\n";
		}
	return 0;
}
