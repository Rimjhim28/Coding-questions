import java.util.*;
import java.lang.*;

class Main {
    
	static long mergeSort(int arr[], int array_size) { 
        int temp[] = new int[array_size]; 
        return _mergeSort(arr, temp, 0, array_size - 1); 
    } 
  
    static long _mergeSort(int arr[], int temp[], int left, int right) { 
        int mid;
        long inv_count = 0; 
        if (right > left) { 
            mid = (right + left) / 2; 
            inv_count = _mergeSort(arr, temp, left, mid); 
            inv_count += _mergeSort(arr, temp, mid + 1, right); 
            inv_count += merge(arr, temp, left, mid + 1, right); 
        } 
        return inv_count; 
    } 

    static long merge(int arr[], int temp[], int left, int mid, int right) { 
        int i, j, k; 
        long inv_count = 0; 
  
        i = left;
        j = mid; 
        k = left; 
        while ((i <= mid - 1) && (j <= right)) { 
            if (arr[i] <= arr[j]) { 
                temp[k++] = arr[i++]; 
            } 
            else { 
                temp[k++] = arr[j++]; 
                inv_count = inv_count + (mid - i); 
            } 
        } 
        while (i <= mid - 1) 
            temp[k++] = arr[i++]; 
        while (j <= right) 
            temp[k++] = arr[j++]; 
        for (i = left; i <= right; i++) 
            arr[i] = temp[i]; 
  
        return inv_count; 
    } 
  

	static long convertToIntArray(String wrong[], String right[], int n){
		int arr[] = new int[n];
		Map<String, Integer> map = new HashMap<>();
		for(int i = 0; i < n; i++){
			map.put(right[i], i);
		}
		for(int i = 0; i < n; i++){
			arr[i] = map.get(wrong[i])+1;
		}
		return mergeSort(arr, n);
	}

	public static void main (String[] args) throws java.lang.Exception{
		Scanner in = new Scanner(System.in);
		int t, n;
		t = in.nextInt();
		while(t-- > 0){
			n = in.nextInt();
			String wrong[] = new String[n];
			String right[] = new String[n];
			for(int i = 0; i < n; i++)
				wrong[i] = in.next();
			for(int i = 0; i < n; i++)
				right[i] = in.next();
			long ans = convertToIntArray(wrong, right, n);
			System.out.println(ans);
		}
	}
}
